#!/usr/bin/env bash

title="LangitKetujuh Export"
name=$(basename "$0")
installdir=$(which basename)
inkscapedir=$(which inkscape)
version="1.5"
web="https://langitketujuh.id"
license="GNU GPLV3+"
tmp="$HOME/.cache"
srgb="/usr/share/color/icc/colord/sRGB.icc"
chemical_proof="/usr/share/color/icc/krita/cmyk.icm"
swop2006_coated3v2="/usr/share/color/icc/idealliance/SWOP2006_Coated3v2.icc"
japancolor2001coated="/usr/share/color/icc/adobe/cmyk/JapanColor2001Coated.icc"
uswebcoatedswop="/usr/share/color/icc/adobe/cmyk/USWebCoatedSWOP.icc"

usage()
{
 echo -e "\n\033[1;36m $title $version\033[0m"
 echo -e "\e[3m Yet Another CLI Exporter\e[0m"
 echo -e "\e[3m Fork from inkporter-cli\e[0m"
 echo
    cat <<- EOF
 Website  : $web
 License  : $license
 
 Usage    : $name [file.svg] [id]
 
 Option   : -i,--install  # install depedency color profile
            -h,--help     # show this help
            -v,--version  # show $name version

 Feature  : * File output: PNG, JPG, TIF, PDF, SVG, EPS, AI, PSD, & WEBP.
            * Deep per inch (DPI).
            * Depth 16-bit.
            * Colorspace RGB/CMYK.
            * Embed color profile CMYK for jpg, tif, psd, and pdf raster.
                RGB   : Default - srgb
                CMYK  : Krita   - chemical proof
                CMYK  : Generic - swop2006 coated3v2
                CMYK  : Corel   - japan color 2001 coated
                CMYK  : Adobe   - u.s. web coated (swop) v2
            * Merge pdf
 
EOF
}

for arg in "$@"; do
    case $arg in
        -i|--install)
            if xbps-install --version > /tmp/checkers >/dev/null 2>&1;
              then
              echo -e "\033[1;36m[1]\033[0m Install depedencies > XBPS distro"
              sudo xbps-install -S inkscape ghostscript ImageMagick libwebp-tools
              elif dnf --version > /tmp/checkers >/dev/null 2>&1;
                then
                echo -e "\033[1;36m[1]\033[0m Install depedencies > RPM distro"
                sudo yum install inkscape ghostscript ImageMagick libwebp-tools
              elif pacman --version > /tmp/checkers >/dev/null 2>&1;
                then
                echo -e "\033[1;36m[1]\033[0m Install depedencies > Pacman distro"
                sudo pacman -S inkscape ghostscript ImageMagick libwebp
              elif apt --version > /tmp/checkers >/dev/null 2>&1;
                then
                echo -e "\033[1;36m[1]\033[0m Install depedencies > APT distro"
                sudo apt -y update; sudo apt install inkscape ghostscript imagemagick webp
              elif zypper --version > /tmp/checkers >/dev/null 2>&1;
                then
                echo -e "\033[1;36m[1]\033[0m Install depedencies > Zypper distro"
                sudo zypper install inkscape ghostscript ImageMagick libwebp-tools
              else
                echo -e "\033[1;36m[1]\033[0m Install depedencies > What your os?"
              fi
              echo -e "\033[1;36m[2]\033[0m Install Adobe ICC"
              echo -e "[*] Preparing new dir $tmp"
              mkdir $tmp/adobe-icc >/dev/null 2>&1
              cd $tmp/adobe-icc
              echo -e "[*] Download Adobe ICC Profiles"
              wget -c https://download.adobe.com/pub/adobe/iccprofiles/mac/AdobeICCProfilesCS4Mac_end-user.zip >/dev/null 2>&1
              echo -e "[*] Unzip"
              unzip -o -q AdobeICCProfilesCS4Mac_end-user.zip >/dev/null 2>&1
              echo -e "[*] Installing"
              sudo install -D -m644 -t /usr/share/color/icc/adobe/rgb */RGB/*.icc
              sudo install -D -m644 -t /usr/share/color/icc/adobe/cmyk */CMYK/*.icc
              sudo install -D -m644 -t /usr/share/doc/adobe */*.pdf
              if ls -lh /usr/share/color/icc/adobe/cmyk  > /tmp/checkers >/dev/null 2>&1; then
                echo -e "[*] Adobe ICC is already installed"
                else
                echo -e "[ ] Adobe ICC is not already installed!"
                exit;
                fi
              echo -e "\033[1;36m[3]\033[0m Install Krita CMYK ICM"
              echo -e "[*] Preparing new dir $tmp"
              mkdir $tmp/krita-icc >/dev/null 2>&1
              cd $tmp/krita-icc
              echo -e "[*] Download Krita CMYK ICM Profiles"
              wget -c https://github.com/KDE/krita/raw/master/krita/data/profiles/cmyk.icm >/dev/null 2>&1
              echo -e "[*] Installing"
              sudo install -D -m644 -t /usr/share/color/icc/krita *.icm
              if ls -lh /usr/share/color/icc/krita | grep icm > /tmp/checkers >/dev/null 2>&1; then
                echo -e "[*] Krita CMYK ICM is already installed"
                else
                echo -e "[ ] Krita CMYK ICM is not already installed!"
                exit;
                fi
              echo -e "\033[1;36m[4]\033[0m Install IDEAlliance ICC"
              echo -e "[+] Preparing new dir $tmp"
              mkdir $tmp/idea-icc >/dev/null 2>&1
              cd $tmp/idea-icc
              echo -e "[*] Download SWOP2006_Coated3v2 ICC Profiles"
              wget -c http://www.color.org/registry/profiles/SWOP2006_Coated3v2.icc >/dev/null 2>&1
              echo -e "[*] Installing"
              sudo install -D -m644 -t /usr/share/color/icc/idealliance *.icc
              if ls -lh /usr/share/color/icc/idealliance | grep icc > /tmp/checkers >/dev/null 2>&1; then
                echo -e "[*] IDEAlliance ICC is already installed"
                else
                echo -e "[ ] IDEAlliance ICC is not already installed!"
                exit;
                fi
            exit 0
            ;;
        -d|--deps)
            echo -e "\033[1;33minkscape version: \033[0m"
            if inkscape --version | grep "Inkscape 1.*" ;then
                echo >/dev/null 2>&1; else
                echo
                echo "$name version: v$version"
                echo "only for inkscape 1.x!";
            fi
            echo
            echo -e "\033[1;33mConvert ImageMagick version: \033[0m"
            convert -version | grep Version:
            echo
            echo -e "\033[1;33mghostscript version: \033[0m"
            gs --version
            echo
            echo -e "\033[1;33mwebp version: \033[0m"
            cwebp -version
            echo
            exit 0
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -v|--version)
            echo -e "\033[1;33m $name\033[0m version $version"
            exit 0
    esac
done

source=$1
idpattern=$2
PS3='Number: '
options=("PNG" "JPG" "TIF" "PDF" "SVG" "EPS" "AI" "PSD" "WEBP" "Cancel")
clear
echo -e "\033[1;36m$title v$version \033[0m"
echo -e "\e[3mYet Another CLI Exporter\e[0m"
echo

# check depedencies
if inkscape --version > /tmp/checkers >/dev/null 2>&1; then
  echo >/dev/null 2>&1
  else
  echo -e "\033[1;33m[FAILED]\033[0m inkscape is not already installed. Please run \033[1;33ml7-export --install\033[0m";
  echo
  exit;
  fi
if ls $chemical_proof > /tmp/checkers >/dev/null 2>&1; then
  echo >/dev/null 2>&1
  else
  echo -e "\033[1;33m[FAILED]\033[0m Krita cmyk icm is not already installed. Please run \033[1;33ml7-export --install\033[0m";
  echo
  exit;
  fi
if convert -version > /tmp/checkers >/dev/null 2>&1; then
  echo >/dev/null 2>&1
  else
  echo -e "\033[1;33m[FAILED]\033[0m ImageMagick is not already installed. Please run \033[1;33ml7-export --install\033[0m";
  echo
  exit;
  fi
if gs --version > /tmp/checkers >/dev/null 2>&1; then
  echo >/dev/null 2>&1
  else
  echo -e "\033[1;33m[FAILED]\033[0m ghostscript is not already installed. Please run \033[1;33ml7-export --install\033[0m";
  echo
  exit;
  fi
if cwebp -version > /tmp/checkers >/dev/null 2>&1; then
  echo >/dev/null 2>&1
  else
  echo -e "\033[1;33m[FAILED]\033[0m webp, libwebp or libwebp-tools is not already installed. Please run \033[1;33ml7-export --install\033[0m";
  echo
  exit;
  fi
if ls -lh /usr/share/color/icc/adobe/cmyk > /tmp/checkers >/dev/null 2>&1; then
  echo >/dev/null 2>&1
  else
  echo -e "\033[1;33m[FAILED]\033[0m Adobe ICC is not already installed. Please run \033[1;33ml7-export --install\033[0m";
  echo
  exit;
  fi
if ls -lh /usr/share/color/icc/idealliance > /tmp/checkers >/dev/null 2>&1; then
  echo >/dev/null 2>&1
  else
  echo -e "\033[1;33m[FAILED]\033[0m Idealliance ICC is not already installed. Please run \033[1;33ml7-export --install\033[0m";
  echo
  exit;
  fi

select opt in "${options[@]}"
do
    case $opt in
        "PNG")
            echo -e "EXPORT: \033[1;36mPNG\033[0m"
            read -e -p "DPI (72/96/300): " -i "96" dpi
              if [ $dpi -gt 300 ]; then
                echo -e "\033[1;33m[FAILED]\033[0m $dpi DPI is not recommended."
                exit
              fi
            echo -e "DPI: \033[1;33m$dpi\033[0m"
            read -e -p "Depth (8/16-bit): " -i "8" depth
              if [ $depth -eq 8 ]; then
                echo -e "Depth: \033[1;33m8-bit\033[0m"
                elif [ $depth -eq 16 ]; then
                echo -e "Depth: \033[1;33m16-bit\033[0m"
                else
                echo -e "\033[1;33m[FAILED]\033[0m "$icc-bit" is not support."
                exit
              fi
            read -e -p "Folder Output: " -i "PNG" directory
            mkdir -p $directory/.temp
            for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
            do
                inkscape -j -i $id -o "$directory/.temp/$id.png" $source -d $dpi >/dev/null 2>&1
            done
            cd $directory/.temp
            for i in *.png; do
                convert "$i"  -quality 100 -colorspace sRGB -depth $depth -profile $srgb "../${i%.*}-$depth-bit-$dpi-dpi.png";
            done
            cd .. && rm -r .temp
            cd ..
            echo -e "\033[1;36m[FINISH]\033[0m Job done."
            break
            ;;
        "JPG")
            echo -e "EXPORT: \033[1;36mJPG\033[0m"
            read -e -p "DPI (72/96/300): " -i "96" dpi
              if [ $dpi -gt 300 ]; then
                echo -e "\033[1;33m[FAILED]\033[0m $dpi DPI is not recommended."
                exit
              fi
            echo -e "DPI: \033[1;33m$dpi\033[0m"
            echo -e "Color Profile"
            echo -e "  \033[1;33m[1] RGB  > Default\033[0m  (sRGB)"
            echo -e "  \033[1;33m[2] CMYK > Krita\033[0m    (Chemical proof)"
            echo -e "  \033[1;33m[3] CMYK > Generic\033[0m  (SWOP2006 Coated3v2)"
            echo -e "  \033[1;33m[4] CMYK > Corel\033[0m    (Japan Color 2001 Coated)"
            echo -e "  \033[1;33m[5] CMYK > Adobe\033[0m    (U.S. Web Coated (SWOP) v2)"
            read -e -p "Number Profile: " icc
            if [ $icc -eq 1 ]; then
              echo -e "Color Profile: \033[1;33mRGB  > Default\033[0m (sRGB)"
              elif [ $icc -eq 2 ]; then
              echo -e "Color Profile: \033[1;33mCMYK > Krita\033[0m (Chemical proof)"
              elif [ $icc -eq 3 ]; then
              echo -e "Color Profile: \033[1;33mCMYK > Generic\033[0m (SWOP2006 Coated3v2)"
              elif [ $icc -eq 4 ]; then
              echo -e "Color Profile: \033[1;33mCMYK > Corel\033[0m (Japan Color 2001 Coated)"
              elif [ $icc -eq 5 ]; then
              echo -e "Color Profile: \033[1;33mCMYK > Adobe\033[0m (U.S. Web Coated (SWOP) v2)"
              else
              echo -e "\033[1;33m[FAILED]\033[0m "$icc" is not support."
              exit
            fi
            read -e -p "Folder Output: " -i "JPG" directory
            echo -e "Background"
            echo -e "  \033[1;33m[1]\033[0m White"
            echo -e "  \033[1;33m[2]\033[0m Black"
            read -e -p "Background: " -i "1" bgcolor
            if [ $bgcolor -eq 1 ]; then
              echo -e "Background: \033[1;33mWhite\033[0m"
              bgcolor="white"
              elif [ $bgcolor -eq 2 ]; then
              echo -e "Background: \033[1;33mBlack\033[0m"
              bgcolor="black"
              else
              echo -e "\033[1;33m[FAILED]\033[0m "$bgcolor" is not support."
              exit
            fi
            mkdir -p $directory/.temp
            for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
            do
                inkscape -j -i $id -o "$directory/.temp/$id.png" $source -d $dpi >/dev/null 2>&1
            done
            cd $directory/.temp
            if [ $icc -eq 1 ]; then
              profilename="srgb-default"
              for i in *.png; do
                convert "$i"  -background $bgcolor -flatten -quality 100 -colorspace sRGB -depth 8 -profile $srgb "../${i%.*}-$profilename-$dpi-dpi.jpg";
              done
              elif [ $icc -eq 2 ]; then
                profilename="cmyk-krita"
                for i in *.png; do
                  convert "$i"  -background $bgcolor -flatten -quality 100 -colorspace CMYK -depth 8 -profile $chemical_proof "../${i%.*}-$profilename-$dpi-dpi.jpg";
                done
              elif [ $icc -eq 3 ]; then
                profilename="cmyk-generic"
                for i in *.png; do
                  convert "$i"  -background $bgcolor -flatten -quality 100 -colorspace CMYK -depth 8 -profile $swop2006_coated3v2 "../${i%.*}-$profilename-$dpi-dpi.jpg";
                done
              elif [ $icc -eq 4 ]; then
                profilename="cmyk-corel"
                for i in *.png; do
                  convert "$i"  -background $bgcolor -flatten -quality 100 -colorspace CMYK -depth 8 -profile $japancolor2001coated "../${i%.*}-$profilename-$dpi-dpi.jpg";
                done
              elif [ $icc -eq 5 ]; then
                profilename="cmyk-adobe"
                for i in *.png; do
                  convert "$i"  -background $bgcolor -flatten -quality 100 -colorspace CMYK -depth 8 -profile $uswebcoatedswop "../${i%.*}-$profilename-$dpi-dpi.jpg";
                done
              fi
            cd .. && rm -r .temp
            cd ..
            echo -e "\033[1;36m[FINISH]\033[0m Job done."
            break
            ;;
        "TIF")
            echo -e "EXPORT: \033[1;36mTIF\033[0m"
            read -e -p "DPI (72/96/300): " -i "96" dpi
              if [ $dpi -gt 300 ]; then
                echo -e "\033[1;33m[FAILED]\033[0m $dpi DPI is not recommended."
                exit
              fi
            echo -e "DPI: \033[1;33m$dpi\033[0m"
            read -e -p "Depth (8/16-bit): " -i "8" depth
              if [ $depth -eq 8 ]; then
                echo -e "Depth: \033[1;33m8-bit\033[0m"
                elif [ $depth -eq 16 ]; then
                echo -e "Depth: \033[1;33m16-bit\033[0m"
                else
                echo -e "\033[1;33m[FAILED]\033[0m "$icc-bit" is not support."
                exit
              fi
            echo -e "Color Profile"
            echo -e "  \033[1;33m[1] RGB  > Default\033[0m  (sRGB)"
            echo -e "  \033[1;33m[2] CMYK > Krita\033[0m    (Chemical proof)"
            echo -e "  \033[1;33m[3] CMYK > Generic\033[0m  (SWOP2006 Coated3v2)"
            echo -e "  \033[1;33m[4] CMYK > Corel\033[0m    (Japan Color 2001 Coated)"
            echo -e "  \033[1;33m[5] CMYK > Adobe\033[0m    (U.S. Web Coated (SWOP) v2)"
            read -e -p "Number Profile: " icc
            if [ $icc -eq 1 ]; then
              echo -e "Color Profile: \033[1;33mRGB  > Default\033[0m (sRGB)"
              elif [ $icc -eq 2 ]; then
              echo -e "Color Profile: \033[1;33mCMYK > Krita\033[0m (Chemical proof)"
              elif [ $icc -eq 3 ]; then
              echo -e "Color Profile: \033[1;33mCMYK > Generic\033[0m (SWOP2006 Coated3v2)"
              elif [ $icc -eq 4 ]; then
              echo -e "Color Profile: \033[1;33mCMYK > Corel\033[0m (Japan Color 2001 Coated)"
              elif [ $icc -eq 5 ]; then
              echo -e "Color Profile: \033[1;33mCMYK > Adobe\033[0m (U.S. Web Coated (SWOP) v2)"
              else
              echo -e "\033[1;33m[FAILED]\033[0m "$icc" is not support."
              exit
            fi
            read -e -p "Folder Output: " -i "TIF" directory
            echo -e "Background"
            echo -e "  \033[1;33m[1]\033[0m White"
            echo -e "  \033[1;33m[2]\033[0m Black"
            read -e -p "Background: " -i "1" bgcolor
            if [ $bgcolor -eq 1 ]; then
              echo -e "Background: \033[1;33mWhite\033[0m"
              bgcolor="white"
              elif [ $bgcolor -eq 2 ]; then
              echo -e "Background: \033[1;33mBlack\033[0m"
              bgcolor="black"
              else
              echo -e "\033[1;33m[FAILED]\033[0m "$bgcolor" is not support."
              exit
            fi
            mkdir -p $directory/.temp
            for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
            do
                inkscape -j -i $id -o "$directory/.temp/$id.png" $source -d $dpi >/dev/null 2>&1
            done
            cd $directory/.temp
            if [ $icc -eq 1 ]; then
              profilename="srgb-default"
              for i in *.png; do
                convert "$i"  -background $bgcolor -flatten -quality 100 -colorspace sRGB -depth $depth -profile $srgb "../${i%.*}-$profilename-$depth-bit-$dpi-dpi.tif";
              done
              elif [ $icc -eq 2 ]; then
                profilename="cmyk-krita"
                for i in *.png; do
                  convert "$i"  -background $bgcolor -flatten -quality 100 -colorspace CMYK -depth $depth -profile $chemical_proof "../${i%.*}-$profilename-$depth-bit-$dpi-dpi.tif";
                done
              elif [ $icc -eq 3 ]; then
                profilename="cmyk-generic"
                for i in *.png; do
                  convert "$i"  -background $bgcolor -flatten -quality 100 -colorspace CMYK -depth $depth -profile $swop2006_coated3v2 "../${i%.*}-$profilename-$depth-bit-$dpi-dpi.tif";
                done
              elif [ $icc -eq 4 ]; then
                profilename="cmyk-corel"
                for i in *.png; do
                  convert "$i"  -background $bgcolor -flatten -quality 100 -colorspace CMYK -depth $depth -profile $japancolor2001coated "../${i%.*}-$profilename-$depth-bit-$dpi-dpi.tif";
                done
              elif [ $icc -eq 5 ]; then
                profilename="cmyk-adobe"
                for i in *.png; do
                  convert "$i"  -background $bgcolor -flatten -quality 100 -colorspace CMYK -depth $depth -profile $uswebcoatedswop "../${i%.*}-$profilename-$depth-bit-$dpi-dpi.tif";
                done
              else
                echo -e "\033[1;33m[FAILED]\033[0m Color Profile is not support."
              fi
            cd .. && rm -r .temp
            cd ..
            echo -e "\033[1;36m[FINISH]\033[0m Job done."
            break
            ;;
        "PDF")
            echo -e "EXPORT: \033[1;36mPDF\033[0m"
            echo -e "Output"
            echo -e "  \033[1;33m[1] Vector\033[0m  (RGB/CMYK)"
            echo -e "  \033[1;33m[2] Raster\033[0m  (CMYK Only. Support Color Profile)"
            read -e -p "Number: " output
            if [ $output -eq 1 ]; then
              echo -e "Convert to: \033[1;33mVector\033[0m"
              echo -e "Colorspace"
              echo -e "  \033[1;33m[1] RGB\033[0m"
              echo -e "  \033[1;33m[2] CMYK\033[0m"
              read -e -p "Number: " color
              if [ $color -gt 2 ]; then
                echo -e "\033[1;33m[FAILED]\033[0m $color not support."
                exit
              fi
              elif [ $output -eq 2 ]; then
                echo -e "Convert to: \033[1;33mRaster\033[0m"
                read -e -p "DPI (72/96/300): " -i "96" dpi
                  if [ $dpi -gt 300 ]; then
                    echo -e "\033[1;33m[FAILED]\033[0m $dpi DPI is not recommended."
                    exit
                  fi
                echo -e "DPI: \033[1;33m$dpi\033[0m"
                echo -e "Color Profile"
                echo -e "  \033[1;33m[1] RGB  > Default\033[0m  (sRGB)"
                echo -e "  \033[1;33m[2] CMYK > Krita\033[0m    (Chemical proof)"
                echo -e "  \033[1;33m[3] CMYK > Generic\033[0m  (SWOP2006 Coated3v2)"
                echo -e "  \033[1;33m[4] CMYK > Corel\033[0m    (Japan Color 2001 Coated)"
                echo -e "  \033[1;33m[5] CMYK > Adobe\033[0m    (U.S. Web Coated (SWOP) v2)"
                read -e -p "Number Profile: " icc
                if [ $icc -eq 1 ]; then
                  echo -e "Color Profile: \033[1;33mRGB  > Default\033[0m (sRGB)"
                  elif [ $icc -eq 2 ]; then
                  echo -e "Color Profile: \033[1;33mCMYK > Krita\033[0m (Chemical proof)"
                  elif [ $icc -eq 3 ]; then
                  echo -e "Color Profile: \033[1;33mCMYK > Generic\033[0m (SWOP2006 Coated3v2)"
                  elif [ $icc -eq 4 ]; then
                  echo -e "Color Profile: \033[1;33mCMYK > Corel\033[0m (Japan Color 2001 Coated)"
                  elif [ $icc -eq 5 ]; then
                  echo -e "Color Profile: \033[1;33mCMYK > Adobe\033[0m (U.S. Web Coated (SWOP) v2)"
                  else
                  echo -e "\033[1;33m[FAILED]\033[0m "$icc" is not support."
                  exit
                fi
            else
              echo -e "\033[1;33m[FAILED]\033[0m "$output" is not support."
              exit
            fi
            read -e -p "Folder Output: " -i "PDF" directory
            read -e -p "Merge PDF (y/N): " merge
              if [[ $merge =~ ^[Yy]$ ]]; then
                echo -e "Merge PDF: \033[1;33mYes\033[0m"
                else
                echo -e "Merge PDF: \033[1;33mNo\033[0m"
                merge="n"
              fi
            mkdir -p $directory/.temp
            #convert vector
            if [ $output -eq 1 ]; then
              for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
              do
                  inkscape -i $id -l -o "$directory/.temp/$id.svg" $source --export-id-only >/dev/null 2>&1
              done
              cd $directory/.temp
              if [ $color -eq 1 ]; then
                profilename="colorspace-srgb"
                for i in *.svg; do cat "$i" | inkscape --pipe -C -o "${i%.*}-vector-$profilename.pdf" >/dev/null 2>&1
                done
                # merge
                if [ $merge == 'y' ]; then
                  mkdir -p merge
                  mv *-vector-$profilename.pdf merge/
                  gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=../$directory-merge-vector-$profilename.pdf merge/*.pdf;
                else
                  mv *-vector-$profilename.pdf ../
                fi
              elif [ $color -eq 2 ]; then
                profilename="colorspace-cmyk"
                for i in *.svg; do cat "$i" | inkscape --pipe -C -o "${i%.*}.pdf" >/dev/null 2>&1
                done
                rm *.svg
                for i in *.pdf; do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=pdfwrite -sColorConversionStrategy=CMYK -dProcessColorModel=/DeviceCMYK -sOutputFile="${i%.*}-vector-$profilename.pdf" "$i"
                    sleep 1
                done
                # merge
                if [ $merge == 'y' ]; then
                  mkdir -p merge
                  mv *-vector-$profilename.pdf merge/
                  gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=../$directory-merge-vector-$profilename.pdf merge/*.pdf;
                else
                  mv *-vector-$profilename.pdf ../
                fi
              else
                echo -e "\033[1;33m[FAILED]\033[0m Can not convert."
                exit
              fi
            # convert raster
            elif [ $output -eq 2 ]; then
              if [ $icc -eq 1 ]; then
                if [ $merge == 'y' ]; then
                  profilename="srgb-default"
                  for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
                  do
                      inkscape -i $id -l -o "$directory/.temp/$id.png" $source -d $dpi >/dev/null 2>&1
                  done
                  cd $directory/.temp
                  for i in *.png; do
                      convert "$i" -quality 100 -colorspace sRGB -depth 8 -profile $srgb "${i%.*}-raster.pdf";
                  done
                  mkdir -p merge
                  mv *.pdf merge
                  cd merge
                  # convert merge
                  gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=pdfwrite -sOutputFile=../../$directory-merge-raster-$profilename-$dpi-dpi.pdf *.pdf;
                  cd ..
                else
                  profilename="srgb-default"
                  for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
                  do
                      inkscape -i $id -l -o "$directory/.temp/$id.png" $source -d $dpi >/dev/null 2>&1
                  done
                  cd $directory/.temp
                  for i in *.png; do
                      convert "$i" -quality 100 -colorspace sRGB -depth 8 -profile $srgb "../${i%.*}-raster-$profilename-$dpi-dpi.pdf";
                  done
                fi
              elif [ $icc -eq 2 ]; then
                if [ $merge == 'y' ]; then
                  profilename="cmyk-krita"
                  for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
                  do
                      inkscape -i $id -l -o "$directory/.temp/$id.png" $source -d $dpi >/dev/null 2>&1
                  done
                  cd $directory/.temp
                  for i in *.png; do
                      convert "$i" -quality 100 -colorspace CMYK -depth 8 -profile $chemical_proof "${i%.*}-raster.pdf";
                  done
                  mkdir -p merge
                  mv *.pdf merge
                  cd merge
                  # convert merge
                  gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=pdfwrite -sOutputFile=../../$directory-merge-raster-$profilename-$dpi-dpi.pdf *.pdf;
                  cd ..
                else
                  profilename="cmyk-krita"
                  for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
                  do
                      inkscape -i $id -l -o "$directory/.temp/$id.png" $source -d $dpi >/dev/null 2>&1
                  done
                  cd $directory/.temp
                  for i in *.png; do
                      convert "$i" -quality 100 -colorspace CMYK -depth 8 -profile $chemical_proof "../${i%.*}-raster-$profilename-$dpi-dpi.pdf";
                  done
                fi
              elif [ $icc -eq 3 ]; then
                if [ $merge == 'y' ]; then
                  profilename="cmyk-generic"
                  for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
                  do
                      inkscape -i $id -l -o "$directory/.temp/$id.png" $source -d $dpi >/dev/null 2>&1
                  done
                  cd $directory/.temp
                  for i in *.png; do
                      convert "$i" -quality 100 -colorspace CMYK -depth 8 -profile $swop2006_coated3v2 "${i%.*}-raster.pdf";
                  done
                  mkdir -p merge
                  mv *.pdf merge
                  cd merge
                  # convert merge
                  gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=pdfwrite -sOutputFile=../../$directory-merge-raster-$profilename-$dpi-dpi.pdf *.pdf;
                  cd ..
                else
                  profilename="cmyk-generic"
                  for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
                  do
                      inkscape -i $id -l -o "$directory/.temp/$id.png" $source -d $dpi >/dev/null 2>&1
                  done
                  cd $directory/.temp
                  for i in *.png; do
                      convert "$i" -quality 100 -colorspace CMYK -depth 8 -profile $swop2006_coated3v2 "../${i%.*}-raster-$profilename-$dpi-dpi.pdf";
                  done
                fi
              elif [ $icc -eq 4 ]; then
                if [ $merge == 'y' ]; then
                  profilename="cmyk-corel"
                  for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
                  do
                      inkscape -i $id -l -o "$directory/.temp/$id.png" $source -d $dpi >/dev/null 2>&1
                  done
                  cd $directory/.temp
                  for i in *.png; do
                      convert "$i" -quality 100 -colorspace CMYK -depth 8 -profile $japancolor2001coated "${i%.*}-raster.pdf";
                  done
                  mkdir -p merge
                  mv *.pdf merge
                  cd merge
                  # convert merge
                  gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=pdfwrite -sOutputFile=../../$directory-merge-raster-$profilename-$dpi-dpi.pdf *.pdf;
                  cd ..
                else
                  profilename="cmyk-corel"
                  for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
                  do
                      inkscape -i $id -l -o "$directory/.temp/$id.png" $source -d $dpi >/dev/null 2>&1
                  done
                  cd $directory/.temp
                  for i in *.png; do
                      convert "$i" -quality 100 -colorspace CMYK -depth 8 -profile $japancolor2001coated "../${i%.*}-raster-$profilename-$dpi-dpi.pdf";
                  done
                fi
              elif [ $icc -eq 5 ]; then
                if [ $merge == 'y' ]; then
                  profilename="cmyk-adobe"
                  for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
                  do
                      inkscape -i $id -l -o "$directory/.temp/$id.png" $source -d $dpi >/dev/null 2>&1
                  done
                  cd $directory/.temp
                  for i in *.png; do
                      convert "$i" -quality 100 -colorspace CMYK -depth 8 -profile $uswebcoatedswop "${i%.*}-raster.pdf";
                  done
                  mkdir -p merge
                  mv *.pdf merge
                  cd merge
                  # convert merge
                  gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=pdfwrite -sOutputFile=../../$directory-merge-raster-$profilename-$dpi-dpi.pdf *.pdf;
                  cd ..
                else
                  profilename="cmyk-adobe"
                  for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
                  do
                      inkscape -i $id -l -o "$directory/.temp/$id.png" $source -d $dpi >/dev/null 2>&1
                  done
                  cd $directory/.temp
                  for i in *.png; do
                      convert "$i" -quality 100 -colorspace CMYK -depth 8 -profile $uswebcoatedswop "../${i%.*}-raster-$profilename-$dpi-dpi.pdf";
                  done
                fi
              else
                echo -e "\033[1;33m[FAILED]\033[0m Color Profile is not support."
                exit
              fi
            else
              echo -e "\033[1;33m[FAILED]\033[0m Can not convert."
              exit
            fi
            cd .. && rm -r .temp
            cd ..
            echo -e "\033[1;36m[FINISH]\033[0m Job done."
            break
            ;;
        "SVG")
            echo -e "EXPORT: \033[1;36mSVG\033[0m"
            read -e -p "Folder Output: " -i "SVG" directory
            mkdir -p $directory
            for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
            do
                inkscape -i $id -l -o "$directory/$id.svg" $source --export-id-only &>> /tmp/$name-svg.log
                sleep 1
            done
            echo -e "\033[1;36m[FINISH]\033[0m Job done."
            break
            ;;
        "EPS")
            echo -e "EXPORT: \033[1;36mEPS\033[0m"
            echo -e "Colorspace"
            echo -e "  \033[1;33m[1] RGB\033[0m"
            echo -e "  \033[1;33m[2] CMYK\033[0m"
            read -e -p "Number: " color
            if [ $color -gt 2 ]; then
              echo -e "\033[1;33m[FAILED]\033[0m $color not support."
              exit
              elif [ $color -lt 1 ]; then
              echo -e "\033[1;33m[FAILED]\033[0m $color not support."
              exit
            fi
            read -e -p "Folder Output: " -i "EPS" directory
            mkdir -p $directory/.temp
            for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
            do
                inkscape -i $id -l -o "$directory/.temp/$id.svg" $source --export-id-only >/dev/null 2>&1
            done
            cd $directory/.temp
            #srgb
            if [ $color -eq 1 ]; then
              profilename="colorspace-srgb"
              for i in *.svg; do cat "$i" | inkscape --pipe -C -o "${i%.*}.pdf" >/dev/null 2>&1
              done
              rm *.svg
              for i in *.pdf; do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=pdfwrite -sOutputFile="../${i%.*}-$profilename.eps" "$i"
	      done
              #cmyk
              elif [ $color -eq 2 ]; then
                profilename="colorspace-cmyk"
                for i in *.svg; do cat "$i" | inkscape --pipe -C -o "${i%.*}.pdf" >/dev/null 2>&1
                done
                rm *.svg
                for i in *.pdf; do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=pdfwrite -sColorConversionStrategy=CMYK -dProcessColorModel=/DeviceCMYK -sOutputFile="../${i%.*}-$profilename.eps" "$i"
                done
            fi
            cd .. && rm -r .temp
            cd ..
            echo -e "\033[1;36m[FINISH]\033[0m Job done"
            break
            ;;
        "AI")
            echo -e "EXPORT: \033[1;36mAI\033[0m"
            echo -e "Colorspace"
            echo -e "  \033[1;33m[1] RGB\033[0m"
            echo -e "  \033[1;33m[2] CMYK\033[0m"
            read -e -p "Number: " color
            if [ $color -gt 2 ]; then
              echo -e "\033[1;33m[FAILED]\033[0m $color not support."
              exit
              elif [ $color -lt 1 ]; then
              echo -e "\033[1;33m[FAILED]\033[0m $color not support."
              exit
            fi
            read -e -p "Folder Output: " -i "AI" directory
            mkdir -p $directory/.temp
            for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
            do
                inkscape -i $id -l -o "$directory/.temp/$id.svg" $source --export-id-only >/dev/null 2>&1
            done
            cd $directory/.temp
            #srgb
            if [ $color -eq 1 ]; then
              profilename="colorspace-srgb"
              for i in *.svg; do cat "$i" | inkscape --pipe -C -o "${i%.*}.pdf" >/dev/null 2>&1
              done
              rm *.svg
              for i in *.pdf; do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=pdfwrite -sOutputFile="../${i%.*}-$profilename.ai" "$i"
              done
              #cmyk
              elif [ $color -eq 2 ]; then
                profilename="colorspace-cmyk"
                for i in *.svg; do cat "$i" | inkscape --pipe -C -o "${i%.*}.pdf" >/dev/null 2>&1
                done
                rm *.svg
                for i in *.pdf; do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=pdfwrite -sColorConversionStrategy=CMYK -dProcessColorModel=/DeviceCMYK -sOutputFile="../${i%.*}-$profilename.ai" "$i"
                done
            fi
            cd .. && rm -r .temp
            cd ..
            echo -e "\033[1;36m[FINISH]\033[0m Job done"
            break
            ;;
        "PSD")
            echo -e "EXPORT: \033[1;36mPSD\033[0m"
            echo -e "Colorspace"
            echo -e "  \033[1;33m[1] RGB\033[0m"
            echo -e "  \033[1;33m[2] CMYK\033[0m"
            read -e -p "Number: " color
            if [ $color -gt 2 ]; then
              echo -e "\033[1;33m[FAILED]\033[0m $color not support."
              exit
            fi
            read -e -p "Depth (8/16-bit): " -i "8" depth
              if [ $depth -eq 8 ]; then
                echo -e "Depth: \033[1;33m8-bit\033[0m"
                elif [ $depth -eq 16 ]; then
                echo -e "Depth: \033[1;33m16-bit\033[0m"
                else
                echo -e "\033[1;33m[FAILED]\033[0m "$depth-bit" is not support."
                exit
              fi
            read -e -p "Folder Output: " -i "PSD" directory
            mkdir -p $directory/.temp
            for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
            do
                inkscape -i $id -l -o "$directory/.temp/$id.svg" $source --export-id-only >/dev/null 2>&1
            done
            cd $directory/.temp
            #srgb
            if [ $color -eq 1 ]; then
              profilename="colorspace-srgb"
              for i in *.svg; do cat "$i" | inkscape --pipe -C -o "${i%.*}.pdf" >/dev/null 2>&1
              done
              rm *.svg
              if [ $depth -eq 16 ]; then
              device=psdrgb16
              else
              device=psdrgb
              fi
              for i in *.pdf; do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=$device -sOutputFile="../${i%.*}-$profilename-$depth-bit.psd" "$i"
              done
              #cmyk
              elif [ $color -eq 2 ]; then
                profilename="colorspace-cmyk"
                for i in *.svg; do cat "$i" | inkscape --pipe -C -o "${i%.*}.pdf" >/dev/null 2>&1
                done
                rm *.svg
                if [ $depth -eq 16 ]; then
                device=psdcmyk16
                else
                device=psdcmyk
                fi
                for i in *.pdf; do gs -q -dSAFER -dBATCH -dNOPAUSE -dNOCACHE -sDEVICE=$device -sColorConversionStrategy=CMYK -dProcessColorModel=/DeviceCMYK -sOutputFile="../${i%.*}-$profilename-$depth-bit.psd" "$i"
                done
            fi
            cd .. && rm -r .temp
            cd ..
            echo -e "\033[1;36m[FINISH]\033[0m Job done"
            break
            ;;
        "WEBP")
            echo -e "EXPORT: \033[1;36mWEBP\033[0m"
            read -e -p "DPI (72/96/300): " -i "96" dpi
              if [ $dpi -gt 300 ]; then
                echo -e "\033[1;33m[FAILED]\033[0m $dpi DPI is not recommended."
                exit
              fi
            echo -e "DPI: \033[1;33m$dpi\033[0m"
            read -e -p "Folder Output: " -i "WEBP" directory
            mkdir -p $directory/.temp
            for id in $(inkscape -S $source | grep $idpattern | cut -d "," -f 1)
            do
                inkscape -j -i $id -o "$directory/.temp/$id.png" $source -d $dpi >/dev/null 2>&1
            done
            cd $directory/.temp
            for i in *.png; do
                cwebp -quiet "$i" -o "../${i%.*}-$dpi-dpi.webp";
            done
            cd .. && rm -r .temp
            echo -e "\033[1;36m[FINISH]\033[0m Job done."
            break
            ;;
        "Cancel")
            clear
            echo -e "\033[1;33mEXIT!.\033[0m"
            exit
            ;;
        *) echo -e "\033[1;33m[FAILED]\033[0m" $REPLY. Try again.;;
    esac
done;
